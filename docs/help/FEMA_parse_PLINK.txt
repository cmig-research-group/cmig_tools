 Function to parse PLINK files
 Inputs:
 bFile:            character       full path to a PLINK file (no extension)

 iid:              cell type       list of subjects for which to extract 
                                   genotyping data; leave empty if all
                                   subjects in the fam file should be read

 SNPList:          cell type       list of SNPs to read; leave empty if
                                   all SNPs in the bim file should be read

 onlyCheck:        logical         if true, a check is performed on 
                                   whether all IIDs exist in the PLINK fam 
                                   file and whether all SNPs in SNPList 
                                   exist in the PLINK bim file; output 
                                   is true if both conditions are met;
                                   additionally, Chr, SNPID, and basePair 
                                   information are also returned

 lowMem:           logical         if true, genomat is returned as int8 
                                   data type (output by PlinkRead_binary2);
                                   no other operations (convert missing to
                                   NaN, mean imputation, standardization, 
                                   or rounding) are applied, irrespective
                                   of the arguments provided by the user

 meanImpute:       logical         if true, replace NaN in genotyping 
                                   matrix with column wise mean value
 
 roundOff:         logical         if true, mean imputed data is converted
                                   back to integers (0, 1, or 2); this is
                                   implemented using the round function
                                   and any value which exceeds 2, after 
                                   rounding, is truncated to 2; only 
                                   meaningful for hardcalls and when 
                                   impute is true

 transform:       	character       type of transformation to perform on
                                   the genotyping data (see Notes):
                                       * 'center'
                                       * 'centre'
                                       * 'std'
                                       * 'none'

 stdType:          character       determine how the standardization
                                   should be performed (only relevant when 
                                   transform is set to std; see Notes):
                                       * 'emperical'
                                       * 'gcta'

 genInfo:          structure       if genInfo structure containing the
                                   fields 'locIID', 'locSNPs', and
                                   'numSubjs' is present, checking is
                                   skipped (see outputs for details on
                                   these fields)

 Outputs:
 genomat:          [n x m]         matrix of m SNPs for n subjects (iid)

 Chr:              [m x 1]         cell type having chromosome number for
                                   the m SNPs (character type inside)

 SNPID:            [m x 1]         cell type having SNP ID for the m SNPs

 BP:               [m x 1]         cell type having base pair coordinates
                                   for the m SNPs

 check:            logical         true if all IDs in IID are present in
                                   the PLINK fam file AND if all SNPs in 
                                   SNPList are present in the PLINK bim 
                                   file; if check fails and onlyCheck is 
                                   false, an error is generated

 errMsg:           character       if check fails, a message indicating
                                   which of the checks (IID/SNPs) failed;
                                   empty otherwise
 
 tInfo:            structure       timing information for different
                                   aspects of this script; useful for
                                   identifying bottleneck

 genInfo:          structure       contains variables that can be reused
                                   when reading the full data;
                                   specifically, contains the following:

 locIID:           [n x 1]         vector having the location in the
                                   genomat for the subjects in IID

 locSNPs:          [m x 1]         vector having the location of the SNPs
                                   within the PLINK files for the SNPs in
                                   SNPList

 numSubjs:         [1 x 1]         number of subjects in the genetics file

 Notes:
 Genotyping matrix can be transformed in the following mways:
 center:           mean centering of the genotyping matrix
 centre:           same as center
 std:              mean center and scaling by standard deviation
 
 Standardization can be implemented in two ways:
 Emperical:        mean (and standard deviation) of each column of
                   genotyping matrix is used
 GCTA style:       allele frequency is computed and used

 If transformation is set to centering, column wise mean is used
 
 When using GCTA style standardization, allele frequencies are computed by
 counting integer values of 0, 1, and 2
 
 If mean imputation is performed, the imputed data will likely contain
 fractional values; these values will not be considered when calculating
 allele frequencies (GCTA style); this behaviour can be modified when
 roundOff is set to true
 
 For emperical style data transformation, both the mean and the standard
 deviations are calculated by omitting the NaN values; therefore, if mean
 imputation is not done and there are NaN values, the resulting
 transformed genotyping matrix will contain valid numbers, except for
 locations with NaN values

 Additionally, note that rounding can make a bit of a difference for 
 emperical transformation as well - when a missing SNP is replaced 
 by the mean of the non-missing values, then during data transformation 
 this SNP will get a value of 0 because the imputed value will be equal 
 to the mean; on the other hand, if rounding to nearest integer is done 
 prior to data transformation then this SNP will get the same value as the
 other SNPs with the same integer value

 For calculating allele frequencies, counting them independently seeems to
 be faster than using histc: counts = histc(genomat, [0 1 2]);
 Using histcounts is efficient but it doesn't count across each column

 Defaults:
 iid:              read all
 SNPList:          read all
 onlyCheck:        false
 lowMem:           false
 meanImpute:       false
 roundOff:         false
 transform:        'none'
 stdType:          'emperical'
 locIID:           []
 locSNPs:          []
